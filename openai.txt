import streamlit as st
import openai
import subprocess
import time
import requests

# Configuration
MODEL = "facebook/opt-125m"  # Small CPU-friendly model
VLLM_PORT = 8001
STREAMLIT_PORT = 8502  # Set when running: streamlit run app.py --server.port=8502

# --- Core Functions ---
def start_server():
    """Start vLLM server process"""
    cmd = f"vllm serve {MODEL} --device cpu --port {VLLM_PORT}"
    return subprocess.Popen(cmd, shell=True)

def check_server():
    """Check if server is responsive"""
    try:
        return requests.get(f"http://localhost:{VLLM_PORT}/v1/models", timeout=2).status_code == 200
    except:
        return False

def init_client():
    """Initialize OpenAI client"""
    return openai.OpenAI(
        base_url=f"http://localhost:{VLLM_PORT}/v1",
        api_key="no-key-needed"
    )

def get_response(client, messages, max_tokens=100, temperature=0.7):
    """Get chat completion from vLLM"""
    prompt = "\n".join(f"{m['role']}: {m['content']}" for m in messages) + "\nassistant:"
    response = client.completions.create(
        model=MODEL,
        prompt=prompt,
        max_tokens=max_tokens,
        temperature=temperature,
        stop=["user:"]
    )
    return response.choices[0].text.strip()

# --- Streamlit App ---
st.title("vLLM Chat Interface")
st.caption(f"Model: {MODEL} | Port: {VLLM_PORT}")

# Initialize session state
if 'server' not in st.session_state:
    st.session_state.server = None
    st.session_state.client = None
    st.session_state.messages = []

# Server Control Buttons
col1, col2 = st.columns(2)
with col1:
    if st.button("üöÄ Start Server"):
        if not st.session_state.server:
            st.session_state.server = start_server()
            with st.spinner("Starting server (may take 1-2 minutes)..."):
                for _ in range(30):
                    if check_server():
                        st.session_state.client = init_client()
                        st.success("Server ready!")
                        break
                    time.sleep(1)
                else:
                    st.error("Server failed to start")

with col2:
    if st.button("üõë Stop Server"):
        if st.session_state.server:
            st.session_state.server.terminate()
            st.session_state.server = None
            st.session_state.client = None
            st.session_state.messages = []
            st.success("Server stopped")

# Chat Parameters
with st.expander("‚öôÔ∏è Settings"):
    max_tokens = st.slider("Max response length", 10, 200, 100)
    temperature = st.slider("Creativity", 0.1, 1.0, 0.7)

# Display Chat History
for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

# Chat Input
if prompt := st.chat_input("Type your message..."):
    if not st.session_state.client:
        st.error("Please start the server first")
        st.stop()
    
    # Add user message
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)
    
    # Get and display response
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            try:
                response = get_response(
                    st.session_state.client,
                    st.session_state.messages,
                    max_tokens,
                    temperature
                )
                st.write(response)
                st.session_state.messages.append({"role": "assistant", "content": response})
            except Exception as e:
                st.error(f"Error: {str(e)}")
