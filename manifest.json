{
  "project_id": "platform",
  "project_name": "Global Platform Configuration",
  "owner": "AI Platform Team",
  "environment": "production",
  "modules": [
    {
      "module_type": "api_gateway",
      "name": "apisix-platform-global",
      "config": {
        "global_plugins": [
          {
            "name": "serverless-pre-function",
            "enabled": true,
            "config": {
              "phase": "access",
              "functions": [
                "${global_plugins.definitions.jwt-token-transform.function_code}"
              ]
            }
          },
          {
            "name": "serverless-post-function",
            "enabled": true,
            "config": {
              "phase": "log",
              "functions": [
                "${global_plugins.definitions.request-logger.function_code}"
              ]
            }
          }
        ]
      }
    }
  ],
  "global_plugins": {
    "definitions": {
      "jwt-token-transform": {
        "function_code": "return function(conf, ctx)\n  local core = require('apisix.core');\n  local jwt = require('resty.jwt');\n  local auth_header = ngx.var.http_authorization;\n  if not auth_header then core.log.warn('Missing Authorization header'); return; end;\n  local encoded_jwt = string.match(auth_header, 'Bearer%s+(.+)');\n  if not encoded_jwt then core.log.warn('Authorization header does not contain Bearer token'); return; end;\n  local jwt_obj = jwt:load_jwt(encoded_jwt);\n  if not (jwt_obj and jwt_obj.valid) then core.log.warn('Invalid JWT'); return; end;\n  local upstream_token = jwt_obj.payload['ahpc_auth_token'];\n  if upstream_token then ngx.req.set_header('Authorization', 'Bearer ' .. upstream_token); core.log.info('Set new Authorization header from ahpc_auth_token claim'); else core.log.warn('ahpc_auth_token claim missing in JWT payload'); end;\nend"
      },
      "request-logger": {
        "function_code": "return function(conf, ctx)\n  local core = require('apisix.core');\n  core.log.info('Request completed: ', ngx.var.request_uri, ' status: ', ngx.status);\nend"
      }
    }
  }
}
