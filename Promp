from fastapi import FastAPI, Request
from prometheus_fastapi_instrumentator import Instrumentator

app = FastAPI()

# ✅ Define your custom label function early (before routes)
def custom_labels(request: Request):
    route_template = request.scope.get("route").path  # /admin/configure/{project_id}
    params = request.path_params                      # {'project_id': 'sas2py'}
    actual_path = route_template
    for k, v in params.items():
        actual_path = actual_path.replace(f"{{{k}}}", str(v))
    return {
        "method": request.method,
        "path": actual_path,
    }

# Define your routes after that
@app.get("/admin/configure/{project_id}")
async def configure_project(project_id: str):
    return {"project_id": project_id, "status": "configured"}

# ✅ Instrument AFTER routes are registered
instrumentator = (
    Instrumentator()
    .add(
        metric_name="http_requests_total",
        labelnames=("method", "path"),
        labels=custom_labels,   # use your earlier defined function
    )
    .instrument(app)
    .expose(app)
)




def custom_labels(request: Request):
    """
    Replace route template placeholders like {project_id} with real values (e.g. sas2py)
    """
    try:
        route_template = request.scope.get("route").path  # e.g. /admin/configure/{project_id}
        params = request.path_params                     # e.g. {"project_id": "sas2py"}
        actual_path = route_template

        for key, val in params.items():
            actual_path = actual_path.replace(f"{{{key}}}", str(val))

        # sanitize (Prometheus label values must not contain quotes/spaces)
        actual_path = actual_path.replace('"', "").replace(" ", "_")

        return {
            "method": request.method,
            "path": actual_path,
        }
    except Exception:
        # fallback if something breaks
        return {"method": request.method, "path": request.url.path}




# ---------------- PROMETHEUS METRICS ----------------
instrumentator = (
    Instrumentator()
    .add(
        metric_name="http_requests_total",
        labelnames=("method", "path"),
        labels=custom_labels,
        metric_doc="Total number of HTTP requests",
    )
    .instrument(app)
    .expose(app, endpoint="/metrics")  # exposes metrics at /metrics
)
# ----------------------------------------------------
