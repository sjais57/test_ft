from prometheus_fastapi_instrumentator import Instrumentator
from prometheus_fastapi_instrumentator.metrics import Info

def custom_handler_label(info: Info) -> Info:
    """
    âœ… Custom Prometheus label enrichment:
       - Adds `project_id` from URL
       - Rewrites `handler` label to actual runtime path
    """
    if not info.request:
        return info

    try:
        path = info.request.url.path or "/unknown"
        parts = path.strip("/").split("/")
        project_id = parts[0] if parts else "unknown"

        # Update labels safely
        info.labels["handler"] = path
        info.labels["project_id"] = project_id

    except Exception as e:
        # Never break metric export
        info.labels["handler"] = "/error"
        info.labels["project_id"] = "error"
    return info


# Initialize instrumentator
instrumentator = Instrumentator(
    should_group_status_codes=False,
    should_group_untemplated=False,
)

# Attach custom processor
instrumentator.add(custom_handler_label)

# Instrument FastAPI and expose Prometheus endpoint
instrumentator.instrument(app).expose(app, endpoint="/metrics")
