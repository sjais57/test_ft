from prometheus_fastapi_instrumentator import Instrumentator
from prometheus_fastapi_instrumentator.metrics import Info

def custom_handler_label(info: Info) -> Info:
    """
    âœ… Custom metrics processor for DSP-FD2:
       - Rewrites 'handler' label to the actual runtime path (e.g. /sas2py/token)
       - Adds 'project_id' label for per-project observability
    """
    # Defensive: if request or response missing, just return as-is
    if not info.request or not hasattr(info.request, "url"):
        return info

    # Actual request path
    path = info.request.url.path or "/unknown"
    parts = path.strip("/").split("/")
    project_id = parts[0] if parts else "unknown"

    # Construct new Info safely
    return Info(
        name=info.name,
        documentation=info.documentation,
        typ=info.typ,
        labels={
            **(info.labels or {}),      # keep existing labels (method, status, etc.)
            "handler": path,            # real runtime path
            "project_id": project_id,   # extracted project id
        },
        value=info.value,
        buckets=info.buckets,
        request=info.request,
        response=info.response,
        error=info.error,
        duration=info.duration,
    )


# Initialize Prometheus instrumentation
instrumentator = Instrumentator(
    should_group_status_codes=False,
    should_ignore_untemplated=False,
    should_group_untemplated=False,
)

# Add custom metric processor
instrumentator.add(custom_handler_label)

# Attach to FastAPI app and expose /metrics endpoint
instrumentator.instrument(app).expose(app, endpoint="/metrics")
