# ---------------------------------------------------------
# Prometheus Instrumentation Setup
# ---------------------------------------------------------
from prometheus_fastapi_instrumentator import Instrumentator

instrumentator = Instrumentator(
    should_instrument_requests_inprogress=True,
    should_group_status_codes=True,
    should_ignore_untemplated=True,
)

# Add custom labels for routing mode
def routing_mode_label(request: Request):
    """Label route type (apisix/direct/unknown)"""
    try:
        front_door = app.state.front_door
        project_id = front_door.extract_project_id(request)
        routing_mode = front_door.project_routing.get(project_id)
        return routing_mode.value if routing_mode else "unknown"
    except Exception:
        return "unknown"

instrumentator.add(
    label_names=("routing_mode",),
    label_default="unknown",
    metric_namespace="dsp_fd2",
    metric_subsystem="gateway",
    label_fn=lambda request, _: {"routing_mode": routing_mode_label(request)}
)

# Instrument and expose /metrics endpoint
instrumentator.instrument(app).expose(app)


==============

from prometheus_fastapi_instrumentator import Instrumentator, metrics

def custom_handler_label(info):
    """
    Custom metrics processor to show real path instead of static '/{path:path}'.
    """
    request = info.request
    if not request:
        return info

    # Extract actual path, like '/sas2py/token'
    path = request.url.path
    info.labels["handler"] = path  # override default handler label

    # Optionally extract project_id separately if you want
    parts = path.strip("/").split("/")
    if parts:
        info.labels["project_id"] = parts[0]

    return info

instrumentator = Instrumentator(
    should_group_status_codes=False,
    should_group_untemplated=False,
)

instrumentator.add(custom_handler_label)
instrumentator.instrument(app).expose(app, endpoint="/metrics")

