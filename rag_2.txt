#Install streamlit langchain langchain-community redis transformers vllm sentence-transformers

import streamlit as st
import os
import logging
from langchain_community.document_loaders import UnstructuredPDFLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Redis
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.prompts import ChatPromptTemplate, PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain.retrievers.multi_query import MultiQueryRetriever
import redis
from redis.commands.search.field import VectorField, TextField
from redis.commands.search.indexDefinition import IndexDefinition, IndexType
from transformers import AutoTokenizer
from vllm import LLM, SamplingParams

# Configure logging
logging.basicConfig(level=logging.INFO)

# Constants
DOC_PATH = "Artificial Intelligence-Machine Learning Explained.pdf"
MODEL_NAME = "codellama/CodeLlama-7b-Instruct-hf"
EMBEDDING_MODEL = "sentence-transformers/all-MiniLM-L6-v2"
REDIS_URL = "redis://localhost:6379"
INDEX_NAME = "pdf_index"
VECTOR_DIM = 384  # Dimension of the embeddings

# Initialize Redis connection
redis_client = redis.Redis.from_url(REDIS_URL)

def ingest_pdf(doc_path):
    """Load PDF documents."""
    if os.path.exists(doc_path):
        loader = UnstructuredPDFLoader(file_path=doc_path)
        data = loader.load()
        logging.info("PDF loaded successfully.")
        return data
    else:
        logging.error(f"PDF file not found at path: {doc_path}")
        st.error("PDF file not found.")
        return None


def split_documents(documents):
    """Split documents into smaller chunks."""
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1200, chunk_overlap=300)
    chunks = text_splitter.split_documents(documents)
    logging.info("Documents split into chunks.")
    return chunks


@st.cache_resource
def load_vector_db():
    """Load or create the vector database in Redis."""
    embedding = HuggingFaceEmbeddings(model_name=EMBEDDING_MODEL)

    # Check if the Redis index exists
    try:
        redis_client.ft(INDEX_NAME).info()
        logging.info("Loaded existing Redis vector database.")
    except:
        # Create the Redis index
        schema = (
            TextField("filename"),
            TextField("content"),
            VectorField(
                "embedding",
                "FLAT",
                {
                    "TYPE": "FLOAT32",
                    "DIM": VECTOR_DIM,
                    "DISTANCE_METRIC": "COSINE",
                },
            ),
        )
        definition = IndexDefinition(prefix=["pdf:"], index_type=IndexType.HASH)
        redis_client.ft(INDEX_NAME).create_index(fields=schema, definition=definition)
        logging.info("Created new Redis vector database.")

    # Load and process the PDF document
    data = ingest_pdf(DOC_PATH)
    if data is None:
        return None

    # Split the documents into chunks
    chunks = split_documents(data)

    # Store embeddings in Redis
    for i, chunk in enumerate(chunks):
        embedding_vector = embedding.embed_query(chunk.page_content)
        redis_client.hset(
            f"pdf:{DOC_PATH}:chunk:{i}",
            mapping={
                "filename": DOC_PATH,
                "content": chunk.page_content,
                "embedding": embedding_vector.tobytes(),  # Store as bytes
            },
        )
    logging.info("Embeddings stored in Redis.")
    return redis_client


def create_retriever(vector_db, llm):
    """Create a multi-query retriever."""
    QUERY_PROMPT = PromptTemplate(
        input_variables=["question"],
        template="""You are an AI language model assistant. Your task is to generate five
different versions of the given user question to retrieve relevant documents from
a vector database. By generating multiple perspectives on the user question, your
goal is to help the user overcome some of the limitations of the distance-based
similarity search. Provide these alternative questions separated by newlines.
Original question: {question}""",
    )

    retriever = MultiQueryRetriever.from_llm(
        vector_db.as_retriever(), llm, prompt=QUERY_PROMPT
    )
    logging.info("Retriever created.")
    return retriever


def create_chain(retriever, llm):
    """Create the chain with preserved syntax."""
    # RAG prompt
    template = """Answer the question based ONLY on the following context:
{context}
Question: {question}
"""

    prompt = ChatPromptTemplate.from_template(template)

    chain = (
        {"context": retriever, "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
    )

    logging.info("Chain created with preserved syntax.")
    return chain


def main():
    st.title("Document Assistant")

    # User input
    user_input = st.text_input("Enter your question:", "")

    if user_input:
        with st.spinner("Generating response..."):
            try:
                # Initialize the language model (Code Llama 7B Instruct with vLLM)
                llm = LLM(
                    model=MODEL_NAME,
                    tensor_parallel_size=1,  # Single CPU
                    gpu_memory_utilization=0.0,  # Force CPU usage
                    device="cpu",  # Explicitly set device to CPU
                )

                # Load the vector database
                vector_db = load_vector_db()
                if vector_db is None:
                    st.error("Failed to load or create the vector database.")
                    return

                # Create the retriever
                retriever = create_retriever(vector_db, llm)

                # Create the chain
                chain = create_chain(retriever, llm)

                # Get the response
                response = chain.invoke(input=user_input)

                st.markdown("**Assistant:**")
                st.write(response)
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
    else:
        st.info("Please enter a question to get started.")


if __name__ == "__main__":
    main()
