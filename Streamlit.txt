import streamlit as st

# Simulated user info (e.g., parsed from JWT)
user = {
    "username": "bob",
    "groups": ["user"]  # Change to ["admin"] to test admin view
}

# Show different views based on role
if "admin" in user["groups"]:
    with st.expander("Admin Settings"):
        st.write("Secret admin controls go here...")
else:
    st.write("Welcome, user!"
import streamlit as st

# Render the expander
with st.expander("Admin Settings"):
    st.write("Only admins can see this content.")

# Inject CSS + JS to specifically enlarge 'Admin Settings'
st.markdown("""
    <style>
        .custom-expander summary {
            font-size: 24px !important;
        }
    </style>
    <script>
        // Wait for DOM to load and add custom class to 'Admin Settings'
        const observer = new MutationObserver(() => {
            document.querySelectorAll('details').forEach((el) => {
                if (el.textContent.includes("Admin Settings")) {
                    el.classList.add("custom-expander");
                }
            });
        });
        observer.observe(document.body, { childList: true, subtree: true });
    </script>
""", unsafe_allow_html=True)

ggggg
import streamlit as st

# Render the expander
with st.expander("Sessions", expanded=True):
    st.write("This is the content inside the expander.")

# Inject JavaScript + CSS to enlarge only "Sessions" title
st.markdown("""
    <style>
        .custom-expander summary {
            font-size: 28px !important;
            font-weight: bold !important;
        }
    </style>
    <script>
        const expanders = Array.from(document.querySelectorAll("details"));
        expanders.forEach(el => {
            const summary = el.querySelector("summary");
            if (summary && summary.innerText.trim() === "Sessions") {
                el.classList.add("custom-expander");
            }
        });
    </script>
""", unsafe_allow_html=True)
